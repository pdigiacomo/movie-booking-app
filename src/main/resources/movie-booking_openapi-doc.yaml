openapi: 3.0.3
info:
  title: Movie booking app API
  description: API description for the Movie bookings app with 3 endpoints - GET, POST and DELETE
  version: 1.0.0
servers:
  - url: /v1
paths:
  /movie:
    get:
      summary: Get a list of all the movies as well as the number of available seats for each movie
      tags:
        - movie
      operationId: getAllMovies
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          required: false
          description: offset number for pagination. It is expected that the client sends this parameter if the total number of records retrieved is greater than the limit set by the server.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieList'
        default:
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
  /booking:
    post:
      summary: sends a new booking of one or more seats for a specific user and movie
      tags:
        - booking
      operationId: bookMovieSeats
      requestBody:
        description: the client request specifying the user, the movie and number of seats
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
      responses:
        '201':
          description: the booking has been created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingResponse'
        default:
          description: if an error occurred during the booking
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
  /booking/{bookingId}:
    delete:
      summary: cancel an existing booking
      tags:
        - booking
      operationId: cancelBooking
      parameters:
        - in: path
          name: bookingId
          schema:
            type: integer
            format: int64
          required: true
      responses:
        '204':
          description: the booking has been cancelled successfully
        default:
          description: an error occurred during the cancellation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
components:
  schemas:
    LookupPayload:
      type: object
      required: [metadata]
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
    Metadata:
      type: object
      properties:
        relationId:
          type: string
        timestamp:
          type: string
          pattern: '^\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T(0\d|1[0-9]|2[0-3]):[012345]\d:[012345]\d\.\d{3}\+0\d:[012345]\d$'
          example: '2019-02-14T17:20:07.866+01:00'
    BookingResponse:
      allOf:
        - $ref: '#/components/schemas/LookupPayload'
        - type: object
          required: [data]
          properties:
            data:
              $ref: '#/components/schemas/Booking'
    SearchPayload:
      type: object
      required: [status, count, type]
      properties:
        status:
          type: string
          enum: [success, error]
        count:
          type: integer
          format: int64
        type:
          type: string
    MovieList:
      type: object
      allOf:
        - $ref: '#/components/schemas/SearchPayload'
        - type: object
          required: [data]
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Movie'
    Movie:
      type: object
      required: [movieId, title, startDatetime, availableSeats]
      properties:
        movieId:
          type: integer
          format: int64
        title:
          type: string
        startDatetime:
          type: string
          format: date-time
        availableSeats:
          type: integer
    ErrorList:
      type: object
      allOf:
        - $ref: '#/components/schemas/SearchPayload'
        - type: object
          required: [data]
          properties:
            relationId:
              type: string
              nullable: true
            timestamp:
              type: string
              pattern: '^\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T(0\d|1[0-9]|2[0-3]):[012345]\d:[012345]\d\.\d{3}\+0\d:[012345]\d$'
              example: '2019-02-14T17:20:07.866+01:00'
              nullable: true
            data:
              type: array
              items:
                $ref: '#/components/schemas/Error'
    Error:
      type: object
      required:
        - code
      properties:
        code:
          type: string
          enum: [ObjectNotFound, NotNull, InvalidArgument, InvalidState, TypeMismatch, MissingId, DataIntegrityViolationException, InvalidFileFormat, InvalidError, ObjectCannotBeSaved, InsufficientPermissions, SystemError, UniquenessViolationError, InvalidDateRange]
        message:
          type: string
          nullable: true
        objectName:
          type: string
          nullable: true
        propertyName:
          type: string
          nullable: true
    Booking:
      type: object
      required: [movieId, userId, nSeatsBooked]
      properties:
        bookingId:
          type: integer
          format: int64
        movieId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        nSeatsBooked:
          type: integer